#!/usr/bin/env python
import ConfigParser
import getpass
import os, stat
import random
import time

class daemon(object):

    def __init__(self,configfile):
        self.myusername = getpass.getuser()
        self.config = ConfigParser.ConfigParser()
        self.configfile = configfile
        self.config_time = 0
        self.reconf()
        self.queue_stat = {'q':0,'r':0}

    def reconf(self):
        # first check if that file was touched
        config_time = os.stat(self.configfile).st_mtime
        if config_time > self.config_time:
            print 'reconf'
            self.config.read(self.configfile)
            self.users = self.config.get('Users','list').split(',')
            assert(self.myusername in self.users)
            self.gid = int(self.config.get('Users','gid'))
            for key,_ in self.config.items('Directories'):
                self.setup_dir(key)
            self.n_run = int(self.config.get('Queue','n_run'))
            self.n_queue = int(self.config.get('Queue','n_queue'))
            self.sleep = int(self.config.get('Queue','sleep'))
            self.config_time = config_time

    def getpath(self,dir,usr):
        basedir = self.config.get('Directories','basedir').replace('<!User!>',usr)
        if dir == 'basedir':
            return basedir
        else:
            return os.path.join(basedir,self.config.get('Directories',dir))

    def mkdir(self,path):
        # makedir if doesn't exist
        if not os.path.exists(path):
            os.makedirs(path)
        # change group owner
        os.chown(path, -1, self.gid)
        # give group (and user) permissions 
        os.chmod(path, stat.S_IRWXG | stat.S_IRWXU)
    
    def setup_dir(self,dir):
        path = self.getpath(dir,self.myusername)
        self.mkdir(path)

    @property
    def busy(self):
        self.queue_stat['q'] = int(os.popen('qstat | grep "Q open" -c').read().rstrip('\n'))
        self.queue_stat['r'] = int(os.popen('qstat | grep "R open" -c').read().rstrip('\n'))
        # decide if queue is busy
        if self.queue_stat['r'] < self.n_run and self.queue_stat['q'] < self.n_queue:
            return False
        else:
            return True

    def do_some_work(self):
        # first find jobs from all users
        jobs = []
        for usr in self.users:
            dir = self.getpath('job',usr)
            if os.path.exists(dir):
                jobs.extend([(usr,f) for f in os.listdir(dir) if os.path.isfile(os.path.join(dir, f))])
        # estimate how much work is needed 
        if len(jobs) == 0: return
        free = self.n_run - self.queue_stat['r']
        # try couple of times to find some work, then go back to sleep (outer loop)
        for i in range(free):
            # choose a job from the list
            usr, job = random.choice(jobs)
            self.qsub(usr,job)

    def qsub(self,usr,job):
        print 'submit job %s from %s by %s'%(job,usr,self.myusername)
        os.popen('qsub %s'%os.path.join(self.getpath('job',usr),job))
        try:
            # move job to submitted directory
            os.rename(os.path.join(self.getpath('job',usr),job), os.path.join(self.getpath('sub',usr),job))
        except:
            # another worker might have moved it already at the same time
            pass

    def serve_forever(self):
        while True:
            if not self.busy:
                self.do_some_work() 
            print 'going to sleep for %s seconds...'%self.sleep
            time.sleep(self.sleep)
            self.reconf()

if __name__ == '__main__':
    my_daemon = daemon('/storage/home/pde3/openQ/config.ini')
    my_daemon.serve_forever()
